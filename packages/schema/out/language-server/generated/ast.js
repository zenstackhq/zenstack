"use strict";
/******************************************************************************
 * This file was generated by langium-cli 0.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.ZModelAstReflection = exports.isSimpleInvocationExpr = exports.SimpleInvocationExpr = exports.isModel = exports.Model = exports.isLiteralExpr = exports.LiteralExpr = exports.isFragmentExpansion = exports.FragmentExpansion = exports.isFragment = exports.Fragment = exports.isEnumField = exports.EnumField = exports.isEnum = exports.Enum = exports.isDataSourceField = exports.DataSourceField = exports.isDataSource = exports.DataSource = exports.isDataModelFieldType = exports.DataModelFieldType = exports.isDataModelFieldAttribute = exports.DataModelFieldAttribute = exports.isDataModelField = exports.DataModelField = exports.isDataModel = exports.DataModel = exports.isSimpleExpr = exports.SimpleExpr = exports.isDeclaration = exports.Declaration = void 0;
/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
const langium_1 = require("langium");
exports.Declaration = 'Declaration';
function isDeclaration(item) {
    return exports.reflection.isInstance(item, exports.Declaration);
}
exports.isDeclaration = isDeclaration;
exports.SimpleExpr = 'SimpleExpr';
function isSimpleExpr(item) {
    return exports.reflection.isInstance(item, exports.SimpleExpr);
}
exports.isSimpleExpr = isSimpleExpr;
exports.DataModel = 'DataModel';
function isDataModel(item) {
    return exports.reflection.isInstance(item, exports.DataModel);
}
exports.isDataModel = isDataModel;
exports.DataModelField = 'DataModelField';
function isDataModelField(item) {
    return exports.reflection.isInstance(item, exports.DataModelField);
}
exports.isDataModelField = isDataModelField;
exports.DataModelFieldAttribute = 'DataModelFieldAttribute';
function isDataModelFieldAttribute(item) {
    return exports.reflection.isInstance(item, exports.DataModelFieldAttribute);
}
exports.isDataModelFieldAttribute = isDataModelFieldAttribute;
exports.DataModelFieldType = 'DataModelFieldType';
function isDataModelFieldType(item) {
    return exports.reflection.isInstance(item, exports.DataModelFieldType);
}
exports.isDataModelFieldType = isDataModelFieldType;
exports.DataSource = 'DataSource';
function isDataSource(item) {
    return exports.reflection.isInstance(item, exports.DataSource);
}
exports.isDataSource = isDataSource;
exports.DataSourceField = 'DataSourceField';
function isDataSourceField(item) {
    return exports.reflection.isInstance(item, exports.DataSourceField);
}
exports.isDataSourceField = isDataSourceField;
exports.Enum = 'Enum';
function isEnum(item) {
    return exports.reflection.isInstance(item, exports.Enum);
}
exports.isEnum = isEnum;
exports.EnumField = 'EnumField';
function isEnumField(item) {
    return exports.reflection.isInstance(item, exports.EnumField);
}
exports.isEnumField = isEnumField;
exports.Fragment = 'Fragment';
function isFragment(item) {
    return exports.reflection.isInstance(item, exports.Fragment);
}
exports.isFragment = isFragment;
exports.FragmentExpansion = 'FragmentExpansion';
function isFragmentExpansion(item) {
    return exports.reflection.isInstance(item, exports.FragmentExpansion);
}
exports.isFragmentExpansion = isFragmentExpansion;
exports.LiteralExpr = 'LiteralExpr';
function isLiteralExpr(item) {
    return exports.reflection.isInstance(item, exports.LiteralExpr);
}
exports.isLiteralExpr = isLiteralExpr;
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.isModel = isModel;
exports.SimpleInvocationExpr = 'SimpleInvocationExpr';
function isSimpleInvocationExpr(item) {
    return exports.reflection.isInstance(item, exports.SimpleInvocationExpr);
}
exports.isSimpleInvocationExpr = isSimpleInvocationExpr;
class ZModelAstReflection {
    getAllTypes() {
        return ['DataModel', 'DataModelField', 'DataModelFieldAttribute', 'DataModelFieldType', 'DataSource', 'DataSourceField', 'Declaration', 'Enum', 'EnumField', 'Fragment', 'FragmentExpansion', 'LiteralExpr', 'Model', 'SimpleExpr', 'SimpleInvocationExpr'];
    }
    isInstance(node, type) {
        return (0, langium_1.isAstNode)(node) && this.isSubtype(node.$type, type);
    }
    isSubtype(subtype, supertype) {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case exports.DataModel:
            case exports.Enum:
            case exports.Fragment: {
                return this.isSubtype(exports.Declaration, supertype);
            }
            case exports.LiteralExpr:
            case exports.SimpleInvocationExpr: {
                return this.isSubtype(exports.SimpleExpr, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(referenceId) {
        switch (referenceId) {
            case 'DataModelFieldType:reference': {
                return exports.Declaration;
            }
            case 'FragmentExpansion:value': {
                return exports.Fragment;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'DataModel': {
                return {
                    name: 'DataModel',
                    mandatory: [
                        { name: 'fields', type: 'array' },
                        { name: 'fragments', type: 'array' }
                    ]
                };
            }
            case 'DataModelField': {
                return {
                    name: 'DataModelField',
                    mandatory: [
                        { name: 'attributes', type: 'array' }
                    ]
                };
            }
            case 'DataModelFieldAttribute': {
                return {
                    name: 'DataModelFieldAttribute',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            case 'DataModelFieldType': {
                return {
                    name: 'DataModelFieldType',
                    mandatory: [
                        { name: 'array', type: 'boolean' },
                        { name: 'optional', type: 'boolean' }
                    ]
                };
            }
            case 'DataSource': {
                return {
                    name: 'DataSource',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Enum': {
                return {
                    name: 'Enum',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Fragment': {
                return {
                    name: 'Fragment',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'datasources', type: 'array' },
                        { name: 'enums', type: 'array' },
                        { name: 'fragments', type: 'array' },
                        { name: 'models', type: 'array' }
                    ]
                };
            }
            case 'SimpleInvocationExpr': {
                return {
                    name: 'SimpleInvocationExpr',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.ZModelAstReflection = ZModelAstReflection;
exports.reflection = new ZModelAstReflection();
//# sourceMappingURL=ast.js.map