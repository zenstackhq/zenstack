datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "./.prisma"
}

enum SpaceUserRole {
    USER
    ADMIN
}

model Space {
    id        String      @id @default(uuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    name      String
    slug      String      @unique
    members   SpaceUser[]
    todoLists TodoList[]
}

model SpaceUser {
    id        String        @id @default(uuid())
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    spaceId   String
    space     Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    userId    String
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    role      SpaceUserRole
}

model User {
    id            String      @id @default(uuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    email         String      @unique
    emailVerified DateTime?
    password      String
    accounts      Account[]
    sessions      Session[]
    name          String?
    todoList      TodoList[]
    spaces        SpaceUser[]
    image         String?
    Todo          Todo[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model TodoList {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    spaceId   String
    space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    ownerId   String
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    title     String
    private   Boolean  @default(false)
    todos     Todo[]
}

model Todo {
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    ownerId     String
    owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    todoListId  String
    todoList    TodoList  @relation(fields: [todoListId], references: [id], onDelete: Cascade)
    title       String
    completedAt DateTime?
}
