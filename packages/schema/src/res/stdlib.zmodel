/**
 * Enum representing referential integrity related actions
 */
enum ReferentialAction {
    /**
     * Used with "onDelete": deleting a referenced record will trigger the deletion of referencing record.
     * Used with "onUpdate": updates the relation scalar fields if the referenced scalar fields of the dependent record are updated.
     */
    Cascade

    /**
     * Used with "onDelete": prevents the deletion if any referencing records exist.
     * Used with "onUpdate": prevents the identifier of a referenced record from being changed.
     */
    Restrict

    /**
     * Similar to 'Restrict', the difference between the two is dependent on the database being used.
     * See details: https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-actions#noaction
     */
    NoAction

    /**
     * Used with "onDelete": the scalar field of the referencing object will be set to NULL.
     * Used with "onUpdate": when updating the identifier of a referenced object, the scalar fields of the referencing objects will be set to NULL.
     */
    SetNull
    
    /**
     * Used with "onDelete": the scalar field of the referencing object will be set to the fields default value.
     * Used with "onUpdate": the scalar field of the referencing object will be set to the fields default value.
     */
    SetDefault
}

/**
 * Enum representing all possible field types
 */
enum AttributeTargetField {
    StringField
    IntField
    BigIntField
    FloatField
    DecimalField
    BooleanField
    DateTimeField
    JsonField
    BytesField
    ModelField
}

/**
 * Indicates the expression context a function can be used.
 */
enum ExpressionContext {
    // used in @default
    DefaultValue

    // used in @@allow and @@deny
    AccessPolicy

    // used in @@validate
    ValidationRule
}

/**
 * Reads value from an environment variable.
 */
function env(name: String): String {
}

/**
 * Gets the current login user.
 */
function auth(): Any {
} @@@expressionContext([AccessPolicy])

/**
 * Gets current date-time (as DateTime type).
 */
function now(): DateTime {
} @@@expressionContext([DefaultValue, AccessPolicy, ValidationRule])

/**
 * Generates a globally unique identifier based on the UUID specs.
 */
function uuid(): String {
} @@@expressionContext([DefaultValue])

/**
 * Generates a globally unique identifier based on the CUID spec.
 */
function cuid(): String {
} @@@expressionContext([DefaultValue])

/**
 * Creates a sequence of integers in the underlying database and assign the incremented 
 * values to the ID values of the created records based on the sequence.
 */
function autoincrement(): Int {
} @@@expressionContext([DefaultValue])

/**
 * Represents default values that cannot be expressed in the Prisma schema (such as random()).
 */
function dbgenerated(expr: String): Any {
} @@@expressionContext([DefaultValue])

/**
 * Gets entities value before an update. Only valid when used in a "update" policy rule.
 */
function future(): Any {
} @@@expressionContext([AccessPolicy])

/**
 * If the field value contains the search string. By default, the search is case-sensitive,
 * but you can override the behavior with the "caseInSensitive" argument.
 */
function contains(field: String, search: String, caseInSensitive: Boolean?): Boolean {
} @@@expressionContext([AccessPolicy, ValidationRule])

/**
 * If the field value matches the search condition with [full-text-search](https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search). Need to enable "fullTextSearch" preview feature to use.
 */
function search(field: String, search: String): Boolean {
} @@@expressionContext([AccessPolicy])

/**
 * If the field value starts with the search string
 */
function startsWith(field: String, search: String): Boolean {
} @@@expressionContext([AccessPolicy, ValidationRule])

/**
 * If the field value ends with the search string
 */
function endsWith(field: String, search: String): Boolean {
} @@@expressionContext([AccessPolicy, ValidationRule])

/**
 * If the field value (a list) has the given search value
 */
function has(field: Any[], search: Any): Boolean {
} @@@expressionContext([AccessPolicy, ValidationRule])

/**
 * If the field value (a list) has every element of the search list
 */
function hasEvery(field: Any[], search: Any[]): Boolean {
} @@@expressionContext([AccessPolicy, ValidationRule])

/**
 * If the field value (a list) has at least one element of the search list
 */
function hasSome(field: Any[], search: Any[]): Boolean {
} @@@expressionContext([AccessPolicy, ValidationRule])

/**
 * If the field value (a list) is empty
 */
function isEmpty(field: Any[]): Boolean {
} @@@expressionContext([AccessPolicy, ValidationRule])

/**
 * Marks an attribute to be only applicable to certain field types.
 */
attribute @@@targetField(targetField: AttributeTargetField[])

/**
 * Marks an attribute to be used for data validation.
 */
attribute @@@validation()

/**
 * Indicates the expression context a function can be used.
 */
attribute @@@expressionContext(_ context: ExpressionContext[])

/**
 * Indicates an attribute is directly supported by the Prisma schema.
 */
attribute @@@prisma()

/**
 * Defines an ID on the model.
 */
attribute @id(map: String?, length: Int?, sort: String?, clustered: Boolean?) @@@prisma

/**
 * Defines a default value for a field.
 */
attribute @default(_ value: ContextType) @@@prisma

/**
 * Defines a unique constraint for this field.
 */
attribute @unique(map: String?, length: Int?, sort: String?, clustered: Boolean?) @@@prisma

/**
 * Defines a multi-field ID (composite ID) on the model.
 */
attribute @@id(_ fields: FieldReference[], name: String?, map: String?, length: Int?, sort: String?, clustered: Boolean?) @@@prisma

/**
 * Defines a compound unique constraint for the specified fields.
 */
attribute @@unique(_ fields: FieldReference[], name: String?, map: String?, length: Int?, sort: String?, clustered: Boolean?) @@@prisma

/**
 * Index types
 */
enum IndexType {
    BTree
    Hash
    Gist
    Gin
    SpGist
    Brin
}

/**
 * Defines an index in the database.
 */
attribute @@index(_ fields: FieldReference[], name: String?, map: String?, length: Int?, sort: String?, clustered: Boolean?, type: IndexType?) @@@prisma

/**
 * Defines meta information about the relation.
 */
attribute @relation(_ name: String?, fields: FieldReference[]?, references: TransitiveFieldReference[]?, onDelete: ReferentialAction?, onUpdate: ReferentialAction?, map: String?) @@@prisma

/**
 * Maps a field name or enum value from the schema to a column with a different name in the database.
 */
attribute @map(_ name: String) @@@prisma

/**
 * Maps the schema model name to a table with a different name, or an enum name to a different underlying enum in the database.
 */
attribute @@map(_ name: String) @@@prisma

/**
* Exclude a field from the Prisma Client (for example, a field that you do not want Prisma users to update).
 */
attribute @ignore() @@@prisma

/**
* Exclude a model from the Prisma Client (for example, a model that you do not want Prisma users to update).
 */
attribute @@ignore() @@@prisma

/**
 * Automatically stores the time when a record was last updated.
 */
attribute @updatedAt() @@@targetField([DateTimeField]) @@@prisma

// String type modifiers

attribute @db.String(_ x: Int?) @@@targetField([StringField]) @@@prisma
attribute @db.Text() @@@targetField([StringField]) @@@prisma
attribute @db.NText() @@@targetField([StringField]) @@@prisma
attribute @db.Char(_ x: Int) @@@targetField([StringField]) @@@prisma
attribute @db.NChar(_ x: Int) @@@targetField([StringField]) @@@prisma
attribute @db.VarChar(_ x: Int) @@@targetField([StringField]) @@@prisma
attribute @db.NVarChar(_ x: Int) @@@targetField([StringField]) @@@prisma
attribute @db.CatalogSingleChar() @@@targetField([StringField]) @@@prisma
attribute @db.TinyText() @@@targetField([StringField]) @@@prisma
attribute @db.MediumText() @@@targetField([StringField]) @@@prisma
attribute @db.LongText() @@@targetField([StringField]) @@@prisma
attribute @db.Bit(_ x: Int?) @@@targetField([StringField, BooleanField, BytesField]) @@@prisma
attribute @db.VarBit(_ x: Int?) @@@targetField([StringField]) @@@prisma
attribute @db.Uuid() @@@targetField([StringField]) @@@prisma
attribute @db.UniqueIdentifier() @@@targetField([StringField]) @@@prisma
attribute @db.Xml() @@@targetField([StringField]) @@@prisma
attribute @db.Inet() @@@targetField([StringField]) @@@prisma
attribute @db.Citext() @@@targetField([StringField]) @@@prisma

// Boolean type modifiers

attribute @db.Boolean() @@@targetField([BooleanField]) @@@prisma
attribute @db.TinyInt(_ x: Int?) @@@targetField([BooleanField]) @@@prisma
attribute @db.Bool() @@@targetField([BooleanField]) @@@prisma

// Int type modifiers

attribute @db.Int() @@@targetField([IntField]) @@@prisma
attribute @db.Integer() @@@targetField([IntField]) @@@prisma
attribute @db.SmallInt() @@@targetField([IntField]) @@@prisma
attribute @db.Oid() @@@targetField([IntField]) @@@prisma
attribute @db.UnsignedInt() @@@targetField([IntField]) @@@prisma
attribute @db.UnsignedSmallInt() @@@targetField([IntField]) @@@prisma
attribute @db.MediumInt() @@@targetField([IntField]) @@@prisma
attribute @db.UnsignedMediumInt() @@@targetField([IntField]) @@@prisma
attribute @db.UnsignedTinyInt() @@@targetField([IntField]) @@@prisma
attribute @db.Year() @@@targetField([IntField]) @@@prisma
attribute @db.Int4() @@@targetField([IntField]) @@@prisma
attribute @db.Int2() @@@targetField([IntField]) @@@prisma

// BigInt type modifiers

attribute @db.BigInt() @@@targetField([BigIntField]) @@@prisma
attribute @db.UnsignedBigInt() @@@targetField([BigIntField]) @@@prisma
attribute @db.Int8() @@@targetField([BigIntField]) @@@prisma

// Float/Decimal type modifiers
attribute @db.DoublePrecision() @@@targetField([FloatField, DecimalField]) @@@prisma
attribute @db.Real() @@@targetField([FloatField, DecimalField]) @@@prisma
attribute @db.Float() @@@targetField([FloatField, DecimalField]) @@@prisma
attribute @db.Decimal(_ p: Int?, _ s: Int?) @@@targetField([FloatField, DecimalField]) @@@prisma
attribute @db.Double() @@@targetField([FloatField, DecimalField]) @@@prisma
attribute @db.Money() @@@targetField([FloatField, DecimalField]) @@@prisma
attribute @db.SmallMoney() @@@targetField([FloatField, DecimalField]) @@@prisma
attribute @db.Float8() @@@targetField([FloatField, DecimalField]) @@@prisma
attribute @db.Float4() @@@targetField([FloatField, DecimalField]) @@@prisma

// DateTime type modifiers

attribute @db.DateTime(_ x: Int?) @@@targetField([DateTimeField]) @@@prisma
attribute @db.DateTime2() @@@targetField([DateTimeField]) @@@prisma
attribute @db.SmallDateTime() @@@targetField([DateTimeField]) @@@prisma
attribute @db.DateTimeOffset() @@@targetField([DateTimeField]) @@@prisma
attribute @db.Timestamp(_ x: Int?) @@@targetField([DateTimeField]) @@@prisma
attribute @db.Timestamptz(_ x: Int?) @@@targetField([DateTimeField]) @@@prisma
attribute @db.Date() @@@targetField([DateTimeField]) @@@prisma
attribute @db.Time(_ x: Int?) @@@targetField([DateTimeField]) @@@prisma
attribute @db.Timetz(_ x: Int?) @@@targetField([DateTimeField]) @@@prisma

// Json type modifiers

attribute @db.Json() @@@targetField([JsonField]) @@@prisma
attribute @db.JsonB() @@@targetField([JsonField]) @@@prisma

// Bytes type modifiers

attribute @db.Bytes() @@@targetField([BytesField]) @@@prisma
attribute @db.ByteA() @@@targetField([BytesField]) @@@prisma
attribute @db.LongBlob() @@@targetField([BytesField]) @@@prisma
attribute @db.Binary() @@@targetField([BytesField]) @@@prisma
attribute @db.VarBinary() @@@targetField([BytesField]) @@@prisma
attribute @db.TinyBlob() @@@targetField([BytesField]) @@@prisma
attribute @db.Blob() @@@targetField([BytesField]) @@@prisma
attribute @db.MediumBlob() @@@targetField([BytesField]) @@@prisma
attribute @db.Image() @@@targetField([BytesField]) @@@prisma

/**
 * Specifies the schema to use in a multi-schema database. https://www.prisma.io/docs/guides/database/multi-schema.
 */
attribute @@schema(_ name: String) @@@prisma

/**
 * Defines an access policy that allows a set of operations when the given condition is true.
 */
attribute @@allow(_ operation: String, _ condition: Boolean)

/**
 * Defines an access policy that denies a set of operations when the given condition is true.
 */
attribute @@deny(_ operation: String, _ condition: Boolean)

/**
 * Indicates that the field is a password field and needs to be hashed before persistence.
 * 
 * ZenStack uses `bcryptjs` library to hash password. You can use the `saltLength` parameter
 * to configure the cost of hashing, or use `salt` parameter to provide an explicit salt.
 * By default, salt length of 12 is used.
 *
 * @see https://www.npmjs.com/package/bcryptjs for details
 * 
 * @saltLength: length of salt to use (cost factor for the hash function)
 * @salt: salt to use (a pregenerated valid salt)
 */
attribute @password(saltLength: Int?, salt: String?) @@@targetField([StringField])

/**
 * Indicates that the field should be omitted when read from the generated services.
 */
attribute @omit()

//////////////////////////////////////////////
// Begin validation attributes and functions
//////////////////////////////////////////////

/**
 * Validates length of a string field.
 */
attribute @length(_ min: Int?, _ max: Int?, _ message: String?) @@@targetField([StringField]) @@@validation

/**
 * Validates a string field value starts with the given text.
 */
attribute @startsWith(_ text: String, _ message: String?) @@@targetField([StringField]) @@@validation

/**
 * Validates a string field value ends with the given text.
 */
attribute @endsWith(_ text: String, _ message: String?) @@@targetField([StringField]) @@@validation

/**
 * Validates a string field value contains the given text.
 */
attribute @contains(_ text: String, _ message: String?) @@@targetField([StringField]) @@@validation

/**
 * Validates a string field value matches a regex.
 */
attribute @regex(_ regex: String, _ message: String?) @@@targetField([StringField]) @@@validation

/**
 * Validates a string field value is a valid email address.
 */
attribute @email(_ message: String?) @@@targetField([StringField]) @@@validation

/**
 * Validates a string field value is a valid ISO datetime.
 */
attribute @datetime(_ message: String?) @@@targetField([StringField]) @@@validation

/**
 * Validates a string field value is a valid url.
 */
attribute @url(_ message: String?) @@@targetField([StringField]) @@@validation

/**
 * Validates a number field is greater than the given value.
 */
attribute @gt(_ value: Int, _ message: String?) @@@targetField([IntField, FloatField, DecimalField]) @@@validation

/**
 * Validates a number field is greater than or equal to the given value.
 */
attribute @gte(_ value: Int, _ message: String?) @@@targetField([IntField, FloatField, DecimalField]) @@@validation

/**
 * Validates a number field is less than the given value.
 */
attribute @lt(_ value: Int, _ message: String?) @@@targetField([IntField, FloatField, DecimalField]) @@@validation

/**
 * Validates a number field is less than or equal to the given value.
 */
attribute @lte(_ value: Int, _ message: String?) @@@targetField([IntField, FloatField, DecimalField]) @@@validation

/**
 * Validates the entity with a complex condition.
 */
attribute @@validate(_ value: Boolean, _ message: String?) @@@validation

/**
 * Validates length of a string field.
 */
function length(field: String, min: Int, max: Int?): Boolean {
} @@@expressionContext([ValidationRule])


/**
 * Validates a string field value matches a regex.
 */
function regex(field: String, regex: String): Boolean {
} @@@expressionContext([ValidationRule])

/**
 * Validates a string field value is a valid email address.
 */
function email(field: String): Boolean {
} @@@expressionContext([ValidationRule])

/**
 * Validates a string field value is a valid ISO datetime.
 */
function datetime(field: String): Boolean {
} @@@expressionContext([ValidationRule])

/**
 * Validates a string field value is a valid url.
 */
function url(field: String): Boolean {
} @@@expressionContext([ValidationRule])

//////////////////////////////////////////////
// End validation attributes and functions
//////////////////////////////////////////////

/**
 * A utility attribute to allow passthrough of arbitrary attribute text to the generated Prisma schema.
 */
attribute @prisma.passthrough(_ text: String)

/**
 * A utility attribute to allow passthrough of arbitrary attribute text to the generated Prisma schema.
 */
attribute @@prisma.passthrough(_ text: String)
