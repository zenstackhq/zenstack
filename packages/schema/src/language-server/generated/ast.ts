/******************************************************************************
 * This file was generated by langium-cli 0.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode, TypeMetaData } from 'langium';

export type Declaration = DataModel | Enum | Fragment;

export const Declaration = 'Declaration';

export function isDeclaration(item: unknown): item is Declaration {
    return reflection.isInstance(item, Declaration);
}

export type SimpleExpr = LiteralExpr | SimpleInvocationExpr;

export const SimpleExpr = 'SimpleExpr';

export function isSimpleExpr(item: unknown): item is SimpleExpr {
    return reflection.isInstance(item, SimpleExpr);
}

export interface DataModel extends AstNode {
    readonly $container: Model;
    fields: Array<DataModelField>
    fragments: Array<FragmentExpansion>
    name: string
}

export const DataModel = 'DataModel';

export function isDataModel(item: unknown): item is DataModel {
    return reflection.isInstance(item, DataModel);
}

export interface DataModelField extends AstNode {
    readonly $container: DataModel | Fragment;
    attributes: Array<DataModelFieldAttribute>
    fieldType: DataModelFieldType
    name: string
}

export const DataModelField = 'DataModelField';

export function isDataModelField(item: unknown): item is DataModelField {
    return reflection.isInstance(item, DataModelField);
}

export interface DataModelFieldAttribute extends AstNode {
    readonly $container: DataModelField;
    args: Array<LiteralExpr>
    name: string
}

export const DataModelFieldAttribute = 'DataModelFieldAttribute';

export function isDataModelFieldAttribute(item: unknown): item is DataModelFieldAttribute {
    return reflection.isInstance(item, DataModelFieldAttribute);
}

export interface DataModelFieldType extends AstNode {
    readonly $container: DataModelField;
    array: boolean
    optional: boolean
    reference?: Reference<Declaration>
    type?: 'Boolean' | 'DateTime' | 'Float' | 'Int' | 'JSON' | 'String'
}

export const DataModelFieldType = 'DataModelFieldType';

export function isDataModelFieldType(item: unknown): item is DataModelFieldType {
    return reflection.isInstance(item, DataModelFieldType);
}

export interface DataSource extends AstNode {
    readonly $container: Model;
    fields: Array<DataSourceField>
}

export const DataSource = 'DataSource';

export function isDataSource(item: unknown): item is DataSource {
    return reflection.isInstance(item, DataSource);
}

export interface DataSourceField extends AstNode {
    readonly $container: DataSource;
    name: string
    value: SimpleExpr
}

export const DataSourceField = 'DataSourceField';

export function isDataSourceField(item: unknown): item is DataSourceField {
    return reflection.isInstance(item, DataSourceField);
}

export interface Enum extends AstNode {
    readonly $container: Model;
    fields: Array<EnumField>
    name: string
}

export const Enum = 'Enum';

export function isEnum(item: unknown): item is Enum {
    return reflection.isInstance(item, Enum);
}

export interface EnumField extends AstNode {
    readonly $container: Enum;
    value: string
}

export const EnumField = 'EnumField';

export function isEnumField(item: unknown): item is EnumField {
    return reflection.isInstance(item, EnumField);
}

export interface Fragment extends AstNode {
    readonly $container: Model;
    fields: Array<DataModelField>
    name: string
}

export const Fragment = 'Fragment';

export function isFragment(item: unknown): item is Fragment {
    return reflection.isInstance(item, Fragment);
}

export interface FragmentExpansion extends AstNode {
    readonly $container: DataModel;
    value: Reference<Fragment>
}

export const FragmentExpansion = 'FragmentExpansion';

export function isFragmentExpansion(item: unknown): item is FragmentExpansion {
    return reflection.isInstance(item, FragmentExpansion);
}

export interface LiteralExpr extends AstNode {
    readonly $container: DataModelFieldAttribute | DataSourceField | SimpleInvocationExpr;
    value: boolean | number | string
}

export const LiteralExpr = 'LiteralExpr';

export function isLiteralExpr(item: unknown): item is LiteralExpr {
    return reflection.isInstance(item, LiteralExpr);
}

export interface Model extends AstNode {
    datasources: Array<DataSource>
    enums: Array<Enum>
    fragments: Array<Fragment>
    models: Array<DataModel>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface SimpleInvocationExpr extends AstNode {
    readonly $container: DataModelFieldAttribute | DataSourceField | SimpleInvocationExpr;
    args: Array<SimpleExpr>
    function: string
}

export const SimpleInvocationExpr = 'SimpleInvocationExpr';

export function isSimpleInvocationExpr(item: unknown): item is SimpleInvocationExpr {
    return reflection.isInstance(item, SimpleInvocationExpr);
}

export type ZModelAstType = 'DataModel' | 'DataModelField' | 'DataModelFieldAttribute' | 'DataModelFieldType' | 'DataSource' | 'DataSourceField' | 'Declaration' | 'Enum' | 'EnumField' | 'Fragment' | 'FragmentExpansion' | 'LiteralExpr' | 'Model' | 'SimpleExpr' | 'SimpleInvocationExpr';

export type ZModelAstReference = 'DataModelFieldType:reference' | 'FragmentExpansion:value';

export class ZModelAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['DataModel', 'DataModelField', 'DataModelFieldAttribute', 'DataModelFieldType', 'DataSource', 'DataSourceField', 'Declaration', 'Enum', 'EnumField', 'Fragment', 'FragmentExpansion', 'LiteralExpr', 'Model', 'SimpleExpr', 'SimpleInvocationExpr'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case DataModel:
            case Enum:
            case Fragment: {
                return this.isSubtype(Declaration, supertype);
            }
            case LiteralExpr:
            case SimpleInvocationExpr: {
                return this.isSubtype(SimpleExpr, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: ZModelAstReference): string {
        switch (referenceId) {
            case 'DataModelFieldType:reference': {
                return Declaration;
            }
            case 'FragmentExpansion:value': {
                return Fragment;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'DataModel': {
                return {
                    name: 'DataModel',
                    mandatory: [
                        { name: 'fields', type: 'array' },
                        { name: 'fragments', type: 'array' }
                    ]
                };
            }
            case 'DataModelField': {
                return {
                    name: 'DataModelField',
                    mandatory: [
                        { name: 'attributes', type: 'array' }
                    ]
                };
            }
            case 'DataModelFieldAttribute': {
                return {
                    name: 'DataModelFieldAttribute',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            case 'DataModelFieldType': {
                return {
                    name: 'DataModelFieldType',
                    mandatory: [
                        { name: 'array', type: 'boolean' },
                        { name: 'optional', type: 'boolean' }
                    ]
                };
            }
            case 'DataSource': {
                return {
                    name: 'DataSource',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Enum': {
                return {
                    name: 'Enum',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Fragment': {
                return {
                    name: 'Fragment',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'datasources', type: 'array' },
                        { name: 'enums', type: 'array' },
                        { name: 'fragments', type: 'array' },
                        { name: 'models', type: 'array' }
                    ]
                };
            }
            case 'SimpleInvocationExpr': {
                return {
                    name: 'SimpleInvocationExpr',
                    mandatory: [
                        { name: 'args', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new ZModelAstReflection();
