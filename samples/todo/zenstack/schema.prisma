datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output = "../node_modules/.zenstack/.prisma"
    previewFeatures = ["fieldReference", "interactiveTransactions", "referentialIntegrity"]
}

enum SpaceUserRole {
    USER
    ADMIN
}

model Space {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    name String
    slug String @unique()
    members SpaceUser[]
    lists List[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
}

model SpaceUser {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role SpaceUserRole
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@unique([userId, spaceId])
}

model User {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    email String @unique()
    emailVerified DateTime?
    password String?
    name String?
    spaces SpaceUser[]
    image String?
    lists List[]
    todos Todo[]
    accounts Account[]
    sessions Session[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
}

model List {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    title String
    private Boolean @default(false)
    todos Todo[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
}

model Todo {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    list List @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String
    title String
    completedAt DateTime?
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
}

model Account {
    id String @id() @default(uuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(uuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
}

model VerificationToken {
    identifier String
    token String @id()
    expires DateTime
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@unique([identifier, token])
}