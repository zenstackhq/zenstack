import { NextApiRequest, NextApiResponse } from 'next';
import { DataHandler } from './handler';
import { AuthUser, DbClientContract, Service } from './types';

/**
 * Options for initializing a Next.js API endpoint request handler. This type is re-exported in @zenstackhq/runtime/server.
 * @see requestHandler
 */
export type RequestHandlerOptions = {
    /**
     * Hook method for providing current login user from session.
     */
    getServerUser: (
        req: NextApiRequest,
        res: NextApiResponse
    ) => Promise<AuthUser | undefined>;
};

/**
 * Creates a Next.js API endpoint request handler which encapsulates RESTful APIs generated by ZenStack.
 * The created handler should be mounted at /api/zenstack endpoint.
 *
 * @param service ZenStack service which wraps a Prisma db client inside
 * @param options Options for initialization
 * @returns An API endpoint request handler
 */
export function requestHandler<DbClient>(
    service: Service<DbClient>,
    options: RequestHandlerOptions
): (req: NextApiRequest, res: NextApiResponse) => Promise<void> {
    const dataHandler = new DataHandler(
        service as Service<DbClientContract>,
        options
    );
    return async (req: NextApiRequest, res: NextApiResponse) => {
        const [route, ...rest] = req.query.path as string[];
        switch (route) {
            // "/data" route is for handling data-access requests
            case 'data':
                return dataHandler.handle(req, res, rest);

            default:
                service.warn(`Unknown route: ${route}`);
                res.status(404).json({ error: `Unknown route: ${route}` });
        }
    };
}
