/*
 * Enum representing referential integrity related actions
 */
enum ReferentialAction {
    /*
     * Used with "onDelete": deleting a referenced record will trigger the deletion of referencing record.
     * Used with "onUpdate": updates the relation scalar fields if the referenced scalar fields of the dependent record are updated.
     */
    Cascade
}

/*
 * Enum representing all possible field types
 */
enum AttributeTargetField {
    StringField
    IntField
    FloatField
    DecimalField
    BooleanField
    DateTimeField
    JsonField
    BytesField
    ModelField
}

/*
 * Reads value from an environment variable.
 */
function env(name: String): String {}

/*
 * Gets thec current login user.
 */
function auth(): Any {}

/*
 * Gets current date-time (as DateTime type).
 */
function now(): DateTime {}

/*
 * Generates a globally unique identifier based on the UUID specs.
 */
function uuid(): String {}

/*
 * Generates a globally unique identifier based on the CUID spec.
 */
function cuid(): String {}

/*
 * Creates a sequence of integers in the underlying database and assign the incremented 
 * values to the ID values of the created records based on the sequence.
 */
function autoincrement(): Int {}

/*
 * Represents default values that cannot be expressed in the Prisma schema (such as random()).
 */
function dbgenerated(expr: String): Any {}

attribute @@@targetField(targetField: AttributeTargetField[])

attribute @@@prisma()

/*
 * Defines an ID on the model.
 */
attribute @id(map: String?) @@@prisma

/*
 * Defines a default value for a field.
 */
attribute @default(_ value: ContextType) @@@prisma

/*
 * Defines a unique constraint for this field.
 */
attribute @unique(map: String?) @@@prisma

/*
 * Defines a compound unique constraint for the specified fields.
 */
attribute @@unique(_ fields: FieldReference[], name: String?, map: String?) @@@prisma

/*
 * Defines an index in the database.
 */
attribute @@index(_ fields: FieldReference[], map: String?) @@@prisma

/*
 * Defines meta information about the relation.
 */
attribute @relation(_ name: String?, fields: FieldReference[]?, references: FieldReference[]?, onDelete: ReferentialAction?, onUpdate: ReferentialAction?, map: String?) @@@prisma

/*
 * Maps a field name or enum value from the schema to a column with a different name in the database.
 */
attribute @map(_ name: String) @@@prisma

/*
 * Maps the schema model name to a table with a different name, or an enum name to a different underlying enum in the database.
 */
attribute @@map(_ name: String) @@@prisma

/*
 * Automatically stores the time when a record was last updated.
 */
attribute @updatedAt() @@@targetField([DateTimeField]) @@@prisma

/*
 * Defines an access policy that allows a set of operations when the given condition is true.
 */
attribute @@allow(_ operation: String, _ condition: Boolean)

/*
 * Defines an access policy that denies a set of operations when the given condition is true.
 */
attribute @@deny(_ operation: String, _ condition: Boolean)

/*
 * Indicates that the field is a password field and needs to be hashed before persistence.
 * 
 * ZenStack uses `bcryptjs` library to hash password. You can use the `saltLength` parameter
 * to configure the cost of hashing, or use `salt` parameter to provide an explicit salt.
 * By default, salt length of 12 is used.
 *
 * @see https://www.npmjs.com/package/bcryptjs for details
 * 
 * @saltLength: length of salt to use (cost factor for the hash function)
 * @salt: salt to use (a pregenerated valid salt)
 */
attribute @password(saltLength: Int?, salt: String?) @@@targetField([StringField])

/*
 * Indicates that the field should be omitted when read from the generated services.
 */
attribute @omit()

/*
 * Validates length of a string field.
 */
attribute @length(_ min: Int?, _ max: Int?) @@@targetField([StringField])

/*
 * Validates a string field value matches a regex.
 */
attribute @regex(_ regex: String) @@@targetField([StringField])

/*
 * Validates a string field value starts with the given text.
 */
attribute @startsWith(_ text: String) @@@targetField([StringField])

/*
 * Validates a string field value ends with the given text.
 */
attribute @endsWith(_ text: String) @@@targetField([StringField])

/*
 * Validates a string field value is a valid email address.
 */
attribute @email() @@@targetField([StringField])

/*
 * Validates a string field value is a valid ISO datetime.
 */
attribute @datetime() @@@targetField([StringField])

/*
 * Validates a string field value is a valid url.
 */
attribute @url() @@@targetField([StringField])

/*
 * Validates a number field is greater than the given value.
 */
attribute @gt(_ value: Int) @@@targetField([IntField, FloatField, DecimalField])

/*
 * Validates a number field is greater than or equal to the given value.
 */
attribute @gte(_ value: Int) @@@targetField([IntField, FloatField, DecimalField])

/*
 * Validates a number field is less than the given value.
 */
attribute @lt(_ value: Int) @@@targetField([IntField, FloatField, DecimalField])

/*
 * Validates a number field is less than or equal to the given value.
 */
attribute @lte(_ value: Int) @@@targetField([IntField, FloatField, DecimalField])
