/*
* Sample model for a collaborative Todo app
*/

/*
 * Data soruce definition
 */
datasource db {
    provider = 'postgresql'
    url = env('DATABASE_URL')
}

/*
 * Enum for user's role in a space
 */
enum SpaceUserRole {
    USER
    ADMIN
}

/*
 * Model for a space in which users can collaborate on Lists and Todos
 */
model Space {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    slug String @unique
    members SpaceUser[]
    lists List[]

    // require login
    @@deny('all', auth() == null)

    // everyone can create a space
    @@allow('create', true)

    // any user in the space can read the space
    @@allow('read', members?[user == auth()])

    // space admin can update and delete
    @@allow('update,delete', members?[user == auth() && role == ADMIN])
}

/*
 * Model representing membership of a user in a space
 */
model SpaceUser {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    space Space @relation(fields:[spaceId], references: [id], onDelete: Cascade)
    spaceId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role SpaceUserRole
    
    @@unique([userId, spaceId])

    // require login
    @@deny('all', auth() == null)

    // space admin can create/update/delete
    @@allow('create,update,delete', space.members?[user == auth() && role == ADMIN])

    // user can read entries for spaces which he's a member of
    @@allow('read', space.members?[user == auth()])
}

/*
 * Model for a user
 */
model User {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    email String @unique
    emailVerified DateTime?
    password String?
    name String?
    spaces SpaceUser[]
    image String?
    lists List[]
    todos Todo[]

    // next-auth
    accounts      Account[]
    sessions      Session[]

    // can be created by anyone, even not logged in
    @@allow('create', true)

    // can be read by current user or users sharing any space
    @@allow('read', auth() == this || spaces?[space.members?[user == auth()]])

    // can only be updated and deleted by himeself
    @@allow('update,delete', auth() == this) 
}

/*
 * Model for a Todo list
 */
model List {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    title String
    private Boolean @default(false)
    todos Todo[]

    // require login
    @@deny('all', auth() == null)

    // can be read by owner or space members (only if not private) 
    @@allow('read', owner == auth() || (space.members?[user == auth()] && !private))

    // can be created/updated/deleted by owner
    @@allow('create,update,delete', owner == auth() && space.members?[user == auth()]) 
}

/*
 * Model for a single Todo
 */
model Todo {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    list List @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String
    title String
    completedAt DateTime?

    // require login
    @@deny('all', auth() == null)

    // owner has full access, also space members have full access (if the parent List is not private)
    @@allow('all', list.owner == auth())
    @@allow('all', list.space.members?[user == auth()] && !list.private)
}

// Models used by next-auth

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @id
    expires    DateTime

    @@unique([identifier, token])
}