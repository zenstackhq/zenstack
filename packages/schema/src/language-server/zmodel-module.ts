import {
    createDefaultModule,
    createDefaultSharedModule,
    DefaultSharedModuleContext,
    inject,
    LangiumServices,
    LangiumSharedServices,
    Module,
    PartialLangiumServices,
} from 'langium';
import {
    ZModelGeneratedModule,
    ZModelGeneratedSharedModule,
} from './generated/module';
import { ZModelLinker } from './zmodel-linker';
import { ZModelScopeComputation } from './zmodel-scope';
import {
    ZModelValidationRegistry,
    ZModelValidator,
} from './validator/zmodel-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ZModelAddedServices = {
    validation: {
        ZModelValidator: ZModelValidator;
    };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ZModelServices = LangiumServices & ZModelAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const ZModelModule: Module<
    ZModelServices,
    PartialLangiumServices & ZModelAddedServices
> = {
    references: {
        ScopeComputation: (services) => new ZModelScopeComputation(services),
        Linker: (services) => new ZModelLinker(services),
    },
    validation: {
        ValidationRegistry: (services) =>
            new ZModelValidationRegistry(services),
        ZModelValidator: () => new ZModelValidator(),
    },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createZModelServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices;
    ZModel: ZModelServices;
} {
    const shared = inject(
        createDefaultSharedModule(context),
        ZModelGeneratedSharedModule
    );
    const ZModel = inject(
        createDefaultModule({ shared }),
        ZModelGeneratedModule,
        ZModelModule
    );
    shared.ServiceRegistry.register(ZModel);
    return { shared, ZModel };
}
